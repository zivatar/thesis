# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2018-11-28 15:32
from __future__ import unicode_literals

import climate.models.Instrument
import climate.models.Site
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('month', models.IntegerField()),
                ('day', models.IntegerField()),
                ('dataAvailable', models.IntegerField(default=0)),
                ('tempMin', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('tempMax', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('tempAvg', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('precipitation', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('precipHalfHour', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('tempDistribution', models.CommaSeparatedIntegerField(blank=True, max_length=200)),
                ('rhDistribution', models.CommaSeparatedIntegerField(blank=True, max_length=200)),
                ('windDistribution', models.CommaSeparatedIntegerField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(help_text='autogenerated id', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='unique title of the instrument', max_length=100, unique=True)),
                ('comment', models.TextField(blank=True, help_text='any additional information')),
                ('type', models.CharField(help_text='manufacturer and type of the instrument (e.g. LaCrosse WS-3600)', max_length=50)),
                ('isActive', models.BooleanField(default=True, help_text='is active')),
                ('isDeleted', models.BooleanField(default=False, help_text='is_deleted')),
                ('primaryImage', models.ImageField(blank=True, help_text='representative image of the instrument', null=True, upload_to=climate.models.Instrument.get_image_path_instrument1)),
            ],
        ),
        migrations.CreateModel(
            name='MonthlyStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('month', models.IntegerField()),
                ('dataAvailable', models.IntegerField(default=0)),
                ('tempMin', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('tempMax', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('tempAvg', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('precipitation', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('tempMinAvg', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('tempMaxAvg', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('summerDays', models.IntegerField(blank=True, null=True)),
                ('frostDays', models.IntegerField(blank=True, null=True)),
                ('winterDays', models.IntegerField(blank=True, null=True)),
                ('coldDays', models.IntegerField(blank=True, null=True)),
                ('warmNights', models.IntegerField(blank=True, null=True)),
                ('warmDays', models.IntegerField(blank=True, null=True)),
                ('hotDays', models.IntegerField(blank=True, null=True)),
                ('tempDistribution', models.CommaSeparatedIntegerField(blank=True, max_length=200)),
                ('rhDistribution', models.CommaSeparatedIntegerField(blank=True, max_length=200)),
                ('windDistribution', models.CommaSeparatedIntegerField(blank=True, max_length=200)),
                ('significants', picklefield.fields.PickledObjectField(default={}, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canUpload', models.BooleanField(default=False, help_text='is allowed to upload raw data')),
                ('user', models.OneToOneField(help_text='key to User', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RawData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdDate', models.DateTimeField(help_text='timestamp')),
                ('pressure', models.DecimalField(blank=True, decimal_places=1, help_text='sea level air pressure (hPa)', max_digits=5, null=True)),
                ('tempIn', models.DecimalField(blank=True, decimal_places=1, help_text='indoor temperature (°C)', max_digits=3, null=True)),
                ('humidityIn', models.DecimalField(blank=True, decimal_places=1, help_text='indoor relative humidity (%)', max_digits=3, null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='temperature at 2m above ground level (°C)', max_digits=3, null=True)),
                ('humidity', models.DecimalField(blank=True, decimal_places=1, help_text='relative humidity at 2m above ground level (°C)', max_digits=3, null=True)),
                ('dewpoint', models.DecimalField(blank=True, decimal_places=1, help_text='dew point at 2m above ground level (°C)', max_digits=3, null=True)),
                ('windChill', models.DecimalField(blank=True, decimal_places=1, help_text='human temperature feeling (°C)', max_digits=3, null=True)),
                ('windSpeed', models.DecimalField(blank=True, decimal_places=1, help_text='wind speed at 10m above ground level (m/s)', max_digits=4, null=True)),
                ('windDir', models.DecimalField(blank=True, decimal_places=1, help_text='wind direction in degrees', max_digits=4, null=True)),
                ('gust', models.DecimalField(blank=True, decimal_places=1, help_text='gust speed at 10m above ground level (m/s)', max_digits=4, null=True)),
                ('precipitation', models.DecimalField(blank=True, decimal_places=1, help_text='precipitation amount in the current time step (mm)', max_digits=4, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RawManualData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(default=-1)),
                ('month', models.IntegerField(default=-1)),
                ('day', models.IntegerField(default=-1)),
                ('tMin', models.FloatField(blank=True, help_text='daily temperature minimum (°C)', null=True)),
                ('tMax', models.FloatField(blank=True, help_text='daily temperature maximum (°C)', null=True)),
                ('precAmount', models.FloatField(blank=True, help_text='daily amount of precipitation (mm)', null=True)),
                ('comment', models.TextField(blank=True)),
                ('isSnow', models.BooleanField(default=False, help_text='is there snow cover')),
                ('snowDepth', models.FloatField(default=0.0, help_text='snow depth (cm)')),
                ('_weatherCode', models.CommaSeparatedIntegerField(blank=True, choices=[(1, 'füst'), (2, 'homály'), (3, 'párásság'), (4, 'köd'), (19, 'nyílt köd'), (13, 'homokvihar'), (14, 'porforgatag'), (5, '22-es halo'), (6, 'melléknap'), (7, 'érintő ív'), (8, 'ritkább halo'), (9, 'villámlás'), (10, 'dörgés'), (11, 'szivárvány'), (12, 'csapadéksáv'), (15, 'szitálás'), (16, 'szemcsés hó'), (17, 'ónos szitálás'), (34, 'ónos eső'), (18, 'eső'), (20, 'havazás'), (22, 'havas eső'), (24, 'zápor'), (25, 'hózápor'), (26, 'havas eső zápor'), (27, 'jégeső'), (29, 'tuba'), (30, 'tornádó'), (31, 'zivatar'), (32, 'hódara-zápor'), (33, 'fagyott eső'), (34, 'harmat'), (35, 'dér'), (36, 'zúzmara'), (37, 'hófúvás')], help_text='list of existing significant events', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='RawObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdDate', models.DateTimeField(auto_now_add=True, help_text='timestamp')),
                ('comment', models.TextField(blank=True, help_text='comment with free text')),
                ('_weatherCode', models.CommaSeparatedIntegerField(blank=True, choices=[(1, 'füst'), (2, 'homály'), (3, 'párásság'), (4, 'köd'), (19, 'nyílt köd'), (13, 'homokvihar'), (14, 'porforgatag'), (5, '22-es halo'), (6, 'melléknap'), (7, 'érintő ív'), (8, 'ritkább halo'), (9, 'villámlás'), (10, 'dörgés'), (11, 'szivárvány'), (12, 'csapadéksáv'), (15, 'szitálás'), (16, 'szemcsés hó'), (17, 'ónos szitálás'), (34, 'ónos eső'), (18, 'eső'), (20, 'havazás'), (22, 'havas eső'), (24, 'zápor'), (25, 'hózápor'), (26, 'havas eső zápor'), (27, 'jégeső'), (29, 'tuba'), (30, 'tornádó'), (31, 'zivatar'), (32, 'hódara-zápor'), (33, 'fagyott eső'), (34, 'harmat'), (35, 'dér'), (36, 'zúzmara'), (37, 'hófúvás')], help_text='observed significant weather event', max_length=200)),
                ('windSpeed', models.IntegerField(choices=[(-1, 'nem észlelt'), (0, '0: szélcsend'), (1, '1: füst lengedezik'), (2, '2: arcon érezhető'), (3, '3: vékony gallyak mozognak'), (4, '4: kisebb ágak mozognak'), (5, '5: nagyobb ágak mozognak, suhog'), (6, '6: drótkötelek zúgnak, vastag ágak mozognak'), (7, '7: gallyak letörnek'), (8, '8: ágak letörnek'), (9, '9: gyengébb fák kidőlnek, épületekben kisebb károk'), (10, '10: fák gyökerestül kidőlnek'), (11, '11: súlyos károk'), (12, '12: súlyos pusztítás')], default=0, help_text='wind speed in Beaufort level, choices=Weather.BEAUFORT_SCALE')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(help_text='autogenerated primary key', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='descriptive name of the site', max_length=100, unique=True)),
                ('comment', models.TextField(blank=True, help_text='any additional information in text')),
                ('createdDate', models.DateTimeField(auto_now_add=True, help_text='datetime of creation')),
                ('isActive', models.BooleanField(default=True, help_text='is active')),
                ('isPublic', models.BooleanField(default=True, help_text='is public')),
                ('isDeleted', models.BooleanField(default=False, help_text='is already deleted')),
                ('lat', models.DecimalField(decimal_places=15, help_text='geographical latitude', max_digits=20)),
                ('lon', models.DecimalField(decimal_places=15, help_text='geographical longitude', max_digits=20)),
                ('narrowArea', models.IntegerField(choices=[(1, 'kert'), (2, 'parkoló'), (3, 'tető'), (4, 'udvar'), (5, 'füves terület'), (6, 'fás terület'), (7, 'vízpart'), (8, 'utca')], default=1, help_text='enum Weather.NARROW_AREA')),
                ('wideArea', models.IntegerField(choices=[(1, 'belváros'), (2, 'kertváros'), (3, 'lakótelep'), (4, 'ipari terület'), (5, 'hegyvidék'), (6, 'vízpart'), (7, 'külterület')], default=1, help_text='enum Weather.WIDE_AREA')),
                ('primaryImage', models.ImageField(blank=True, help_text='representative image of the site', null=True, upload_to=climate.models.Site.get_image_path_site1)),
                ('owner', models.ForeignKey(help_text='key for auth.user table', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UnprocessedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_date', models.DateTimeField(help_text='starting date of data pack')),
                ('to_date', models.DateTimeField(help_text='finishing date of data pack')),
                ('uploaded_at', models.DateTimeField(help_text='datetime of upload')),
                ('site_id', models.ForeignKey(help_text='foreign key for Site table', on_delete=django.db.models.deletion.CASCADE, to='climate.Site')),
            ],
        ),
        migrations.CreateModel(
            name='YearlyStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('significants', picklefield.fields.PickledObjectField(default={}, editable=False)),
                ('siteId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climate.Site')),
            ],
        ),
        migrations.AddField(
            model_name='rawobservation',
            name='siteId',
            field=models.ForeignKey(help_text='foreign key to Site table', on_delete=django.db.models.deletion.CASCADE, to='climate.Site'),
        ),
        migrations.AddField(
            model_name='rawmanualdata',
            name='siteId',
            field=models.ForeignKey(help_text='foreign key for Site table', on_delete=django.db.models.deletion.CASCADE, to='climate.Site'),
        ),
        migrations.AddField(
            model_name='rawdata',
            name='siteId',
            field=models.ForeignKey(help_text='foreign key for Site table', on_delete=django.db.models.deletion.CASCADE, to='climate.Site'),
        ),
        migrations.AddField(
            model_name='monthlystatistics',
            name='siteId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climate.Site'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='siteId',
            field=models.ForeignKey(blank=True, help_text='foreign key for Site table', null=True, on_delete=django.db.models.deletion.CASCADE, to='climate.Site'),
        ),
        migrations.AddField(
            model_name='dailystatistics',
            name='siteId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climate.Site'),
        ),
        migrations.AlterUniqueTogether(
            name='yearlystatistics',
            unique_together=set([('siteId', 'year')]),
        ),
        migrations.AlterUniqueTogether(
            name='rawmanualdata',
            unique_together=set([('year', 'month', 'day', 'siteId')]),
        ),
        migrations.AlterUniqueTogether(
            name='rawdata',
            unique_together=set([('siteId', 'createdDate')]),
        ),
        migrations.AlterUniqueTogether(
            name='monthlystatistics',
            unique_together=set([('year', 'month', 'siteId')]),
        ),
        migrations.AlterUniqueTogether(
            name='dailystatistics',
            unique_together=set([('siteId', 'year', 'month', 'day')]),
        ),
    ]
